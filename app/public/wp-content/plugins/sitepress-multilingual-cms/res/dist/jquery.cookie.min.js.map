{"version":3,"sources":["../js/jquery.cookie.js"],"names":["factory","define","amd","jQuery","$","raw","s","decoded","decodeURIComponent","replace","pluses","converted","indexOf","slice","config","json","JSON","parse","er","cookie","key","value","options","undefined","extend","defaults","expires","days","t","Date","setDate","getDate","stringify","String","document","encodeURIComponent","toUTCString","path","domain","secure","join","decode","cookies","split","result","i","l","length","parts","name","shift","removeCookie"],"mappings":"cAOC,SAAUA,GACe,kBAAXC,SAAyBA,OAAOC,IAEvCD,QAAQ,UAAWD,GAGnBA,EAAQG,SAEd,SAAUC,GAIR,QAASC,GAAIC,GACT,MAAOA,GAGX,QAASC,GAAQD,GACb,MAAOE,oBAAmBF,EAAEG,QAAQC,EAAQ,MAGhD,QAASC,GAAUL,GACQ,IAAnBA,EAAEM,QAAQ,OAEVN,EAAIA,EAAEO,MAAM,GAAI,GAAGJ,QAAQ,OAAQ,KAAKA,QAAQ,QAAS,MAE7D,KACI,MAAOK,GAAOC,KAAOC,KAAKC,MAAMX,GAAKA,EACvC,MAAMY,KAjBZ,GAAIR,GAAS,MAoBTI,EAASV,EAAEe,OAAS,SAAUC,EAAKC,EAAOC,GAG1C,OAAcC,KAAVF,EAAqB,CAGrB,GAFAC,EAAUlB,EAAEoB,UAAWV,EAAOW,SAAUH,GAET,gBAApBA,GAAQI,QAAsB,CACrC,GAAIC,GAAOL,EAAQI,QAASE,EAAIN,EAAQI,QAAU,GAAIG,KACtDD,GAAEE,QAAQF,EAAEG,UAAYJ,GAK5B,MAFAN,GAAQP,EAAOC,KAAOC,KAAKgB,UAAUX,GAASY,OAAOZ,GAE7Ca,SAASf,QACbL,EAAOT,IAAMe,EAAMe,mBAAmBf,GACtC,IACAN,EAAOT,IAAMgB,EAAQc,mBAAmBd,GACxCC,EAAQI,QAAU,aAAeJ,EAAQI,QAAQU,cAAgB,GACjEd,EAAQe,KAAU,UAAYf,EAAQe,KAAO,GAC7Cf,EAAQgB,OAAU,YAAchB,EAAQgB,OAAS,GACjDhB,EAAQiB,OAAU,WAAa,IACjCC,KAAK,IAOX,IAAK,GAHDC,GAAS3B,EAAOT,IAAMA,EAAME,EAC5BmC,EAAUR,SAASf,OAAOwB,MAAM,MAChCC,EAASxB,MAAMG,MACVsB,EAAI,EAAGC,EAAIJ,EAAQK,OAAQF,EAAIC,EAAGD,IAAK,CAC5C,GAAIG,GAAQN,EAAQG,GAAGF,MAAM,KACzBM,EAAOR,EAAOO,EAAME,SACpB/B,EAASsB,EAAOO,EAAMR,KAAK,KAE/B,IAAIpB,GAAOA,IAAQ6B,EAAM,CACrBL,EAASjC,EAAUQ,EACnB,OAGCC,IACDwB,EAAOK,GAAQtC,EAAUQ,IAIjC,MAAOyB,GAGX9B,GAAOW,YAEPrB,EAAE+C,aAAe,SAAU/B,EAAKE,GAC5B,WAAsBC,KAAlBnB,EAAEe,OAAOC,KAEThB,EAAEe,OAAOC,EAAK,GAAIhB,EAAEoB,UAAWF,GAAWI,SAAU,MAC7C","file":"jquery.cookie.min.js","sourcesContent":["/*!\n * jQuery Cookie Plugin v1.3.1\n * https://github.com/carhartl/jquery-cookie\n *\n * Copyright 2013 Klaus Hartl\n * Released under the MIT license\n */\n(function (factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as anonymous module.\n        define(['jquery'], factory);\n    } else {\n        // Browser globals.\n        factory(jQuery);\n    }\n}(function ($) {\n\n    var pluses = /\\+/g;\n\n    function raw(s) {\n        return s;\n    }\n\n    function decoded(s) {\n        return decodeURIComponent(s.replace(pluses, ' '));\n    }\n\n    function converted(s) {\n        if (s.indexOf('\"') === 0) {\n            // This is a quoted cookie as according to RFC2068, unescape\n            s = s.slice(1, -1).replace(/\\\\\"/g, '\"').replace(/\\\\\\\\/g, '\\\\');\n        }\n        try {\n            return config.json ? JSON.parse(s) : s;\n        } catch(er) {}\n    }\n\n    var config = $.cookie = function (key, value, options) {\n\n        // write\n        if (value !== undefined) {\n            options = $.extend({}, config.defaults, options);\n\n            if (typeof options.expires === 'number') {\n                var days = options.expires, t = options.expires = new Date();\n                t.setDate(t.getDate() + days);\n            }\n\n            value = config.json ? JSON.stringify(value) : String(value);\n\n            return (document.cookie = [\n                config.raw ? key : encodeURIComponent(key),\n                '=',\n                config.raw ? value : encodeURIComponent(value),\n                options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE\n                options.path    ? '; path=' + options.path : '',\n                options.domain  ? '; domain=' + options.domain : '',\n                options.secure  ? '; secure' : ''\n            ].join(''));\n        }\n\n        // read\n        var decode = config.raw ? raw : decoded;\n        var cookies = document.cookie.split('; ');\n        var result = key ? undefined : {};\n        for (var i = 0, l = cookies.length; i < l; i++) {\n            var parts = cookies[i].split('=');\n            var name = decode(parts.shift());\n            var cookie = decode(parts.join('='));\n\n            if (key && key === name) {\n                result = converted(cookie);\n                break;\n            }\n\n            if (!key) {\n                result[name] = converted(cookie);\n            }\n        }\n\n        return result;\n    };\n\n    config.defaults = {};\n\n    $.removeCookie = function (key, options) {\n        if ($.cookie(key) !== undefined) {\n            // Must not alter options, thus extending a fresh object...\n            $.cookie(key, '', $.extend({}, options, { expires: -1 }));\n            return true;\n        }\n        return false;\n    };\n\n}));"]}